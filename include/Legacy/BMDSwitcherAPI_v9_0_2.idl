/* -LICENSE-START-
** Copyright (c) 2023 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v9_0_2.idl */

// Forward Declarations

interface IBMDSwitcher_v9_0_2;
interface IBMDSwitcherDiscovery_v9_0_2;
interface IBMDSwitcherHyperDeck_v9_0_2;
interface IBMDSwitcherHyperDeckIterator_v9_0_2;

/* Interface IBMDSwitcher_v9_0_2 - Switcher Object */

[
    object,
    uuid(1EE9AE7F-8B15-4952-B2C2-BED98D553D09),
    helpstring("Switcher Object v9.0.2")
] interface IBMDSwitcher_v9_0_2 : IUnknown
{
    HRESULT GetProductName ([out] BSTR* productName);
    HRESULT GetVideoMode ([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode ([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT DoesVideoModeChangeRequireReconfiguration ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* required);
    HRESULT GetMethodForDownConvertedSD ([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD ([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT Get3GSDIOutputLevel ([out] BMDSwitcher3GSDIOutputLevel* outputLevel);
    HRESULT Set3GSDIOutputLevel ([in] BMDSwitcher3GSDIOutputLevel outputLevel);
    HRESULT GetPowerStatus ([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT GetTimeCode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT SetTimeCode ([in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT RequestTimeCode (void);
    HRESULT GetTimeCodeLocked ([out] BOOL* timeCodeLocked);
    HRESULT GetTimeCodeExternal ([out] BOOL* timeCodeExternal);
    HRESULT GetTimeCodeMode ([out] BMDSwitcherTimeCodeMode* timeCodeMode);
    HRESULT SetTimeCodeMode ([in] BMDSwitcherTimeCodeMode timeCodeMode);
    HRESULT GetAreOutputsConfigurable ([out] BOOL* configurable);
    HRESULT GetSuperSourceCascade ([out] BOOL* cascade);
    HRESULT SetSuperSourceCascade ([in] BOOL cascade);
    HRESULT SuspendStreaming ([in] unsigned int durationMs);
    HRESULT AllowStreamingToResume (void);
    HRESULT DoesSupportAutoVideoMode ([out] BOOL* supported);
    HRESULT GetAutoVideoMode ([out] BOOL* enabled);
    HRESULT GetAutoVideoModeDetected ([out] BOOL* detected);
    HRESULT SetAutoVideoMode ([in] BOOL enabled);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery_v9_0_2 - Used to discover and connect to switchers */

[
    object,
    uuid(1A031A26-3E3B-49D5-BB16-0FD78E22BCE4),
    helpstring("Used to discover and connect to switchers v9.0.2")
] interface IBMDSwitcherDiscovery_v9_0_2 : IUnknown
{
    HRESULT ConnectTo ([in] BSTR deviceAddress, [out] IBMDSwitcher_v9_0_2** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

importlib("stdole2.tlb");

[
    uuid(4DB07DF8-72BE-4C0D-BBE6-03B9DFF59B3C),
    helpstring("CBMDSwitcherDiscovery Class v9.0.2")
] coclass CBMDSwitcherDiscovery_v9_0_2
{
    [default] interface IBMDSwitcherDiscovery_v9_0_2;
};

/* Interface IBMDSwitcherHyperDeck_v9_0_2 - Remote Control of HyperDecks */

[
    object,
    uuid(07C07443-1B40-49B7-9C89-C9130EC471E5),
    helpstring("Remote Control of HyperDecks v9.0.2")
] interface IBMDSwitcherHyperDeck_v9_0_2 : IUnknown
{
    HRESULT GetId ([out] BMDSwitcherHyperDeckId* hyperDeckId);
    HRESULT GetConnectionStatus ([out] BMDSwitcherHyperDeckConnectionStatus* status);
    HRESULT IsRemoteAccessEnabled ([out] BOOL* enabled);
    HRESULT GetStorageMediaCount ([out] unsigned int* count);
    HRESULT GetStorageMediaState ([in] unsigned int storageMediaId, [out] BMDSwitcherHyperDeckStorageMediaState* state);
    HRESULT GetActiveStorageMedia ([out] int* index);
    HRESULT SetActiveStorageMedia ([in] int index);
    HRESULT GetClipCount ([out] unsigned int* count);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetSwitcherInput ([out] BMDSwitcherInputId* inputId);
    HRESULT SetSwitcherInput ([in] BMDSwitcherInputId inputId);
    HRESULT GetFrameRate ([out] unsigned int* frameRate, [out] unsigned int* timeScale);
    HRESULT IsInterlacedVideo ([out] BOOL* isInterlaced);
    HRESULT IsDropFrameTimeCode ([out] BOOL* isDropFrame);
    HRESULT GetPlayerState ([out] BMDSwitcherHyperDeckPlayerState* state);
    HRESULT GetCurrentClip ([out] BMDSwitcherHyperDeckClipId* clipId);
    HRESULT SetCurrentClip ([in] BMDSwitcherHyperDeckClipId clipId);
    HRESULT GetCurrentClipTime ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT SetCurrentClipTime ([in] unsigned short hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT GetCurrentTimelineTime ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT SetCurrentTimelineTime ([in] unsigned short hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT GetEstimatedRecordTimeRemaining ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT Play (void);
    HRESULT Record (void);
    HRESULT Stop (void);
    HRESULT Shuttle ([in] int speedPercent);
    HRESULT GetShuttleSpeed ([out] int* speedPercent);
    HRESULT Jog ([in] int frameDelta);
    HRESULT GetLoopedPlayback ([out] BOOL* loop);
    HRESULT SetLoopedPlayback ([in] BOOL loop);
    HRESULT GetSingleClipPlayback ([out] BOOL* single);
    HRESULT SetSingleClipPlayback ([in] BOOL single);
    HRESULT GetAutoRollOnTake ([out] BOOL* autoRollOnTake);
    HRESULT SetAutoRollOnTake ([in] BOOL autoRollOnTake);
    HRESULT GetAutoRollOnTakeFrameDelay ([out] unsigned short* frameDelay);
    HRESULT SetAutoRollOnTakeFrameDelay ([in] unsigned short frameDelay);
    HRESULT GetNetworkAddress ([out] unsigned int* address);
    HRESULT SetNetworkAddress ([in] unsigned int address);
    HRESULT GetModelName ([out] BSTR* model);
    HRESULT AddCallback ([in] IBMDSwitcherHyperDeckCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherHyperDeckCallback* callback);
};

/* Interface IBMDSwitcherHyperDeckIterator_v9_0_2 - HyperDeck Iterator */

[
    object,
    uuid(17436484-F944-4680-8ABE-92B5F3E9BCAD),
    helpstring("HyperDeck Iterator v9.0.2")
] interface IBMDSwitcherHyperDeckIterator_v9_0_2 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherHyperDeck_v9_0_2** hyperDeck);
    HRESULT GetById ([in] BMDSwitcherHyperDeckId hyperDeckId, [out] IBMDSwitcherHyperDeck_v9_0_2** hyperDeck);
};
