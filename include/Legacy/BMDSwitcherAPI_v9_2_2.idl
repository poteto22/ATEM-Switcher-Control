/* -LICENSE-START-
** Copyright (c) 2023 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

// Forward Declarations

interface IBMDSwitcherMultiView_v9_2_2;
interface IBMDSwitcherMultiViewIterator_v9_2_2;
interface IBMDSwitcherStreamRTMP_v9_2_2;


/* Interface IBMDSwitcherMultiView - MultiView Object */

[
    object,
    uuid(38EC859F-5EC6-4EDE-BDF5-1AAC9E63B1EB),
    helpstring("MultiView Object")
] interface IBMDSwitcherMultiView_v9_2_2 : IUnknown
{
    HRESULT CanChangeLayout ([out] BOOL* canChangeLayout);
    HRESULT GetLayout ([out] BMDSwitcherMultiViewLayout* layout);
    HRESULT SetLayout ([in] BMDSwitcherMultiViewLayout layout);
    HRESULT SupportsQuadrantLayout ([out] BOOL* supportsQuadrantLayout);
    HRESULT GetWindowInput ([in] unsigned int window, [out] BMDSwitcherInputId* input);
    HRESULT SetWindowInput ([in] unsigned int window, [in] BMDSwitcherInputId input);
    HRESULT GetWindowCount ([out] unsigned int* windowCount);
    HRESULT GetInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT CanRouteInputs ([out] BOOL* canRoute);
    HRESULT SupportsVuMeters ([out] BOOL* supportsVuMeters);
    HRESULT CurrentInputSupportsVuMeter ([in] unsigned int window, [out] BOOL* supportsVuMeter);
    HRESULT GetVuMeterEnabled ([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetVuMeterEnabled ([in] unsigned int window, [in] BOOL enabled);
    HRESULT CanAdjustVuMeterOpacity ([out] BOOL* canAdjustVuMeterOpacity);
    HRESULT GetVuMeterOpacity ([out] double* opacity);
    HRESULT SetVuMeterOpacity ([in] double opacity);
    HRESULT CanToggleSafeAreaEnabled ([out] BOOL* canToggleSafeAreaEnabled);
    HRESULT CurrentInputSupportsSafeArea ([in] unsigned int window, [out] BOOL* supportsSafeArea);
    HRESULT GetSafeAreaEnabled ([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetSafeAreaEnabled ([in] unsigned int window, [in] BOOL enabled);
    HRESULT SupportsProgramPreviewSwap ([out] BOOL* supportsProgramPreviewSwap);
    HRESULT GetProgramPreviewSwapped ([out] BOOL* swapped);
    HRESULT SetProgramPreviewSwapped ([in] BOOL swapped);
    HRESULT AddCallback ([in] IBMDSwitcherMultiViewCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMultiViewCallback* callback);
};

/* Interface IBMDSwitcherMultiViewIterator - MultiView Iterator */

[
    object,
    uuid(B731477F-A85D-4003-9A89-9606309F3D34),
    helpstring("MultiView Iterator")
] interface IBMDSwitcherMultiViewIterator_v9_2_2 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherMultiView_v9_2_2** multiView);
};


/* Interface IBMDSwitcherStreamRTMP_v9_2_2 - Switcher Stream RTMP Object */

[
    object,
    uuid(55105AD1-96FA-4738-821F-7348D9ADBA4A),
    helpstring("Switcher Stream RTMP Object")
] interface IBMDSwitcherStreamRTMP_v9_2_2 : IUnknown
{
    HRESULT StartStreaming (void);
    HRESULT StopStreaming (void);
    HRESULT IsStreaming ([out] BOOL* streaming);
    HRESULT IsStreamingAvailable ([out] BOOL* available);
    HRESULT GetStatus ([out] BMDSwitcherStreamRTMPState* state, [out] BMDSwitcherStreamRTMPError* error);
    HRESULT SetServiceName ([in] BSTR serviceName);
    HRESULT GetServiceName ([out] BSTR* serviceName);
    HRESULT SetUrl ([in] BSTR url);
    HRESULT GetUrl ([out] BSTR* url);
    HRESULT SetKey ([in] BSTR url);
    HRESULT GetKey ([out] BSTR* key);
    HRESULT SetVideoBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetVideoBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT SetAudioBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetAudioBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned long long* duration);
    HRESULT GetTimecode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetEncodingBitrate ([out] unsigned int* encodingBitrate);
    HRESULT GetCacheUsed ([out] double* cacheUsed);
    HRESULT SetAuthentication ([in] BSTR username, [in] BSTR password);
    HRESULT GetAuthentication ([out] BSTR* username, [out] BSTR* password);
    HRESULT SetLowLatency ([in] BOOL lowLatency);
    HRESULT GetLowLatency ([out] BOOL* lowLatency);
    HRESULT AddCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
};

