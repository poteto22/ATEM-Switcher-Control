/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v8_5_3.idl */

// Forward Declarations

interface IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3;
interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3;
interface IBMDSwitcherRecordAV_v8_5_3;
interface IBMDSwitcherStreamRTMP_v8_5_3;

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3 - Fairlight Headphone Output Object */

[
    object,
    uuid(A9E5FB7D-A436-4179-9F3F-FF2BD5580830),
    helpstring("Fairlight Headphone Output Object v8_5_3")
] interface IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3 : IUnknown
{
    HRESULT GetGain ([out] double* decibel);
    HRESULT SetGain ([in] double decibel);
    HRESULT GetInputMasterOutGain ([out] double* decibel);
    HRESULT SetInputMasterOutGain ([in] double decibel);
    HRESULT GetInputTalkbackGain ([out] double* decibel);
    HRESULT SetInputTalkbackGain ([in] double decibel);
    HRESULT GetInputSidetoneGain ([out] double* decibel);
    HRESULT SetInputSidetoneGain ([in] double decibel);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutputIteratorv_XX - Fairlight Audio Headphone Output Iterator */

[
    object,
    uuid(63EED6B1-D574-4312-90B4-F6DEBC290701),
    helpstring("Fairlight Audio Headphone Output Iterator v8_5_3")
] interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3** audioHeadphoneOutput);
};

/* Interface IBMDSwitcherRecordAV_v8_5_3 - Switcher RecordAV Object */

[
    object,
    uuid(43C5A333-3DF4-4DF2-8F81-0A994CE63315),
    helpstring("Switcher RecordAV Object v8_5_3")
] interface IBMDSwitcherRecordAV_v8_5_3 : IUnknown
{
    HRESULT StartRecording (void);
    HRESULT StopRecording (void);
    HRESULT SwitchDisk (void);
    HRESULT IsRecording ([out] BOOL* recording);
    HRESULT GetStatus ([out] BMDSwitcherRecordAVState* state, [out] BMDSwitcherRecordAVError* error);
    HRESULT SetFilename ([in] BSTR filename);
    HRESULT GetFilename ([out] BSTR* filename);
    HRESULT SetRecordInAllCameras ([in] BOOL recordInAllCameras);
    HRESULT GetRecordInAllCameras ([out] BOOL* recordInAllCameras);
    HRESULT DoesSupportISORecording ([out] BOOL* supportsISORecording);
    HRESULT SetRecordAllISOInputs ([in] BOOL recordAllISOInputs);
    HRESULT GetRecordAllISOInputs ([out] BOOL* recordAllISOInputs);
    HRESULT GetWorkingSetLimit ([out] unsigned int* workingSetLimit);
    HRESULT SetWorkingSetDisk ([in] unsigned int workingSetIndex, [in] BMDSwitcherRecordDiskId diskId);
    HRESULT GetWorkingSetDisk ([in] unsigned int workingSetIndex, [out] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetActiveDiskIndex ([out] unsigned int* workingSetIndex);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetTotalRecordingTimeAvailable ([out] unsigned int* totalRecordingTimeAvailable);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherRecordAVCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordAVCallback* callback);
};

/* Interface IBMDSwitcherStreamRTMP_v8_5_3 - Switcher Stream RTMP Object */

[
    object,
    uuid(89A72582-A54B-40B6-9CFB-9B750D6C5DD9),
    helpstring("Switcher Stream RTMP Object v8_5_3")
] interface IBMDSwitcherStreamRTMP_v8_5_3 : IUnknown
{
    HRESULT StartStreaming (void);
    HRESULT StopStreaming (void);
    HRESULT IsStreaming ([out] BOOL* streaming);
    HRESULT GetStatus ([out] BMDSwitcherStreamRTMPState* state, [out] BMDSwitcherStreamRTMPError* error);
    HRESULT SetServiceName ([in] BSTR serviceName);
    HRESULT GetServiceName ([out] BSTR* serviceName);
    HRESULT SetUrl ([in] BSTR url);
    HRESULT GetUrl ([out] BSTR* url);
    HRESULT SetKey ([in] BSTR url);
    HRESULT GetKey ([out] BSTR* key);
    HRESULT SetVideoBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetVideoBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT SetAudioBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetAudioBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetEncodingBitrate ([out] unsigned int* encodingBitrate);
    HRESULT GetCacheUsed ([out] double* cacheUsed);
    HRESULT SetAuthentication ([in] BSTR username, [in] BSTR password);
    HRESULT GetAuthentication ([out] BSTR* username, [out] BSTR* password);
    HRESULT SetLowLatency ([in] BOOL lowLatency);
    HRESULT GetLowLatency ([out] BOOL* lowLatency);
    HRESULT AddCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
};

 [
     object,
     uuid(C3F347F3-49BB-4832-835C-E329FBF5707E),
     helpstring("Fairlight Analog Audio Input Object v8_5_3")
 ] interface IBMDSwitcherFairlightAnalogAudioInput_v8_5_3 : IUnknown
 {
     HRESULT GetSupportedInputLevels ([out] BMDSwitcherFairlightAudioAnalogInputLevel* levels);
     HRESULT GetInputLevel ([out] BMDSwitcherFairlightAudioAnalogInputLevel* level);
     HRESULT SetInputLevel ([in] BMDSwitcherFairlightAudioAnalogInputLevel level);
     HRESULT AddCallback ([in] IBMDSwitcherFairlightAnalogAudioInputCallback* callback);
     HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAnalogAudioInputCallback* callback);
 };
