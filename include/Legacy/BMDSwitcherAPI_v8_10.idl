/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v8_10.idl */

// Forward Declarations

interface IBMDSwitcher_v8_10;
interface IBMDSwitcherInputIterator_v8_10;
interface IBMDSwitcherInput_v8_10;
interface IBMDSwitcherFairlightAudioSource_v8_10;
interface IBMDSwitcherFairlightAudioSourceIterator_v8_10;



/* Interface IBMDSwitcher_v8_10 - Switcher Object */

[
    object,
    uuid(00E7C247-9504-452B-AC97-F56EC3A180DE),
    helpstring("Switcher Object v8.10")
] interface IBMDSwitcher_v8_10 : IUnknown
{
    HRESULT GetProductName ([out] BSTR* productName);
    HRESULT GetVideoMode ([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode ([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT DoesVideoModeChangeRequireReconfiguration ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* required);
    HRESULT GetMethodForDownConvertedSD ([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD ([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT Get3GSDIOutputLevel ([out] BMDSwitcher3GSDIOutputLevel* outputLevel);
    HRESULT Set3GSDIOutputLevel ([in] BMDSwitcher3GSDIOutputLevel outputLevel);
    HRESULT GetPowerStatus ([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT GetTimeCode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT SetTimeCode ([in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT RequestTimeCode (void);
    HRESULT GetTimeCodeLocked ([out] BOOL* timeCodeLocked);
    HRESULT GetTimeCodeMode ([out] BMDSwitcherTimeCodeMode* timeCodeMode);
    HRESULT SetTimeCodeMode ([in] BMDSwitcherTimeCodeMode timeCodeMode);
    HRESULT GetAreOutputsConfigurable ([out] BOOL* configurable);
    HRESULT GetSuperSourceCascade ([out] BOOL* cascade);
    HRESULT SetSuperSourceCascade ([in] BOOL cascade);
    HRESULT SuspendStreaming ([in] unsigned int durationMs);
    HRESULT AllowStreamingToResume (void);
    HRESULT DoesSupportAutoVideoMode ([out] BOOL* supported);
    HRESULT GetAutoVideoMode ([out] BOOL* enabled);
    HRESULT GetAutoVideoModeDetected ([out] BOOL* detected);
    HRESULT SetAutoVideoMode ([in] BOOL enabled);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery_v8_10 - Used to discover and connect to switchers */

[
    object,
    uuid(1BE1FC40-E404-48C5-BAB6-535D27D8AF88),
    helpstring("Used to discover and connect to switchers v8.10")
] interface IBMDSwitcherDiscovery_v8_10 : IUnknown
{
    HRESULT ConnectTo ([in] BSTR deviceAddress, [out] IBMDSwitcher_v8_10** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

importlib("stdole2.tlb");

[
    uuid(ACB00FD2-ABE1-467F-A2D5-5D77001815D1),
    helpstring("CBMDSwitcherDiscovery Class v8.10")
] coclass CBMDSwitcherDiscovery_v8_10
{
    [default] interface IBMDSwitcherDiscovery_v8_10;
};

/* Interface IBMDSwitcherInputIterator - Input Iterator */

[
    object,
    uuid(275E9888-2F65-4B2E-9434-1937A72B9EC4),
    helpstring("Switcher Input Iterator Object v8_10")
] interface IBMDSwitcherInputIterator_v8_10 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherInput_v8_10** input);
    HRESULT GetById ([in] BMDSwitcherInputId inputId, [out] IBMDSwitcherInput_v8_10** input);
};


/* Interface IBMDSwitcherInput - Switcher Input Object */

[
    object,
    uuid(0B182DF9-3732-4B1C-921B-C3B914AD441F),
    helpstring("Switcher Input Object v8_10")
] interface IBMDSwitcherInput_v8_10 : IUnknown
{
    HRESULT GetPortType ([out] BMDSwitcherPortType* type);
    HRESULT GetInputAvailability ([out] BMDSwitcherInputAvailability* availability);
    HRESULT SetShortName ([in] BSTR name);
    HRESULT GetShortName ([out] BSTR* name);
    HRESULT SetLongName ([in] BSTR name);
    HRESULT GetLongName ([out] BSTR* name);
    HRESULT AreNamesDefault ([in] bool* isDefault);
    HRESULT ResetNames (void);
    HRESULT IsProgramTallied ([out] bool* isTallied);
    HRESULT IsPreviewTallied ([out] bool* isTallied);
    HRESULT GetAvailableExternalPortTypes ([out] BMDSwitcherExternalPortType* types);
    HRESULT SetCurrentExternalPortType ([in] BMDSwitcherExternalPortType value);
    HRESULT GetCurrentExternalPortType ([out] BMDSwitcherExternalPortType* value);
    HRESULT GetInputId ([out] BMDSwitcherInputId* inputId);
    HRESULT AddCallback ([in] IBMDSwitcherInputCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherInputCallback* callback);
};


/* Interface IBMDSwitcherFairlightAudioSource - Fairlight Audio Source Object */

[
    object,
    uuid(D8D1D78D-0B9F-4300-9734-AE8DA35A8ECA),
    helpstring("Fairlight Audio Source Object v8.10")
] interface IBMDSwitcherFairlightAudioSource_v8_10 : IUnknown
{
    HRESULT IsActive ([out] BOOL* active);
    HRESULT GetSourceType ([out] BMDSwitcherFairlightAudioSourceType* type);
    HRESULT GetMaxDelayFrames ([out] unsigned short* maxDelay);
    HRESULT GetDelayFrames ([out] unsigned short* delay);
    HRESULT SetDelayFrames ([in] unsigned short delay);
    HRESULT GetInputGain ([out] double* gain);
    HRESULT SetInputGain ([in] double gain);
    HRESULT HasStereoSimulation ([out] BOOL* hasStereoSimulation);
    HRESULT GetStereoSimulationIntensity ([out] double* intensity);
    HRESULT SetStereoSimulationIntensity ([in] double intensity);
    HRESULT GetEffect ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetPan ([out] double* pan);
    HRESULT SetPan ([in] double pan);
    HRESULT GetFaderGain ([out] double* gain);
    HRESULT SetFaderGain ([in] double gain);
    HRESULT GetSupportedMixOptions ([out] BMDSwitcherFairlightAudioMixOption* mixOptions);
    HRESULT GetMixOption ([out] BMDSwitcherFairlightAudioMixOption* mixOption);
    HRESULT SetMixOption ([in] BMDSwitcherFairlightAudioMixOption mixOption);
    HRESULT IsMixedIn ([out] BOOL* mixedIn);
    HRESULT ResetOutputPeakLevels (void);
    HRESULT GetId ([out] BMDSwitcherFairlightAudioSourceId* sourceId);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioSourceCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioSourceCallback* callback);
};

/* Interface IBMDSwitcherFairlightAudioSourceIterator - Fairlight Audio Source Iterator */

[
    object,
    uuid(050233A3-3244-46B0-A7CD-EF37A869ACDD),
    helpstring("Fairlight Audio Source Iterator v8.10")
] interface IBMDSwitcherFairlightAudioSourceIterator_v8_10 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherFairlightAudioSource_v8_10** audioSource);
    HRESULT GetById ([in] BMDSwitcherFairlightAudioSourceId audioSourceId, [out] IBMDSwitcherFairlightAudioSource_v8_10** audioSource);
};


/* Interface IBMDSwitcherFairlightAudioMixer_v8_10 - Fairlight Audio Mixer Object v8.10 */

[
    object,
    uuid(BC625428-D969-4512-9462-8AF8B65F0B21),
    helpstring("Fairlight Audio Mixer Object v8.10")
] interface IBMDSwitcherFairlightAudioMixer_v8_10 : IUnknown
{
    HRESULT GetMasterOutEffect ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetMasterOutFaderGain ([out] double* gain);
    HRESULT SetMasterOutFaderGain ([in] double gain);
    HRESULT GetMasterOutFollowFadeToBlack ([out] BOOL* follow);
    HRESULT SetMasterOutFollowFadeToBlack ([in] BOOL follow);
    HRESULT GetAudioFollowVideoCrossfadeTransition ([out] BOOL* transition);
    HRESULT SetAudioFollowVideoCrossfadeTransition ([in] BOOL transition);
    HRESULT SetAllLevelNotificationsEnabled ([in] BOOL enabled);
    HRESULT ResetMasterOutPeakLevels (void);
    HRESULT ResetAllPeakLevels (void);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioMixerCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioMixerCallback* callback);
};
