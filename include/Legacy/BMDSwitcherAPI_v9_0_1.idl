/* -LICENSE-START-
** Copyright (c) 2023 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v9_0_1.idl */

// Forward Declarations

interface IBMDSwitcherHyperDeck_v9_0_1;
interface IBMDSwitcherHyperDeckIterator_v9_0_1;
interface IBMDSwitcherRecordDisk_v9_0_1;
interface IBMDSwitcherRecordDiskIterator_v9_0_1;
interface IBMDSwitcherRecordAV_v9_0_1;
interface IBMDSwitcherStreamRTMP_v9_0_1;

/* Interface IBMDSwitcherHyperDeck_v9_0_1 - Remote Control of HyperDecks */

[
    object,
    uuid(6BB0F7E1-2013-4C8F-A4C0-1016B0C37D14),
    helpstring("Remote Control of HyperDecks v9.0.1")
] interface IBMDSwitcherHyperDeck_v9_0_1 : IUnknown
{
    HRESULT GetId ([out] BMDSwitcherHyperDeckId* hyperDeckId);
    HRESULT GetConnectionStatus ([out] BMDSwitcherHyperDeckConnectionStatus* status);
    HRESULT IsRemoteAccessEnabled ([out] BOOL* enabled);
    HRESULT GetStorageMediaCount ([out] unsigned int* count);
    HRESULT GetStorageMediaState ([in] unsigned int storageMediaId, [out] BMDSwitcherHyperDeckStorageMediaState* state);
    HRESULT GetActiveStorageMedia ([out] int* index);
    HRESULT SetActiveStorageMedia ([in] int index);
    HRESULT GetClipCount ([out] unsigned int* count);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetSwitcherInput ([out] BMDSwitcherInputId* inputId);
    HRESULT SetSwitcherInput ([in] BMDSwitcherInputId inputId);
    HRESULT GetFrameRate ([out] unsigned int* frameRate, [out] unsigned int* timeScale);
    HRESULT IsInterlacedVideo ([out] BOOL* isInterlaced);
    HRESULT IsDropFrameTimeCode ([out] BOOL* isDropFrame);
    HRESULT GetPlayerState ([out] BMDSwitcherHyperDeckPlayerState* state);
    HRESULT GetCurrentClip ([out] BMDSwitcherHyperDeckClipId* clipId);
    HRESULT SetCurrentClip ([in] BMDSwitcherHyperDeckClipId clipId);
    HRESULT GetCurrentClipTime ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT SetCurrentClipTime ([in] unsigned short hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT GetCurrentTimelineTime ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT SetCurrentTimelineTime ([in] unsigned short hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT GetEstimatedRecordTimeRemaining ([out] unsigned short* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
    HRESULT Play (void);
    HRESULT Record (void);
    HRESULT Stop (void);
    HRESULT Shuttle ([in] int speedPercent);
    HRESULT GetShuttleSpeed ([out] int* speedPercent);
    HRESULT Jog ([in] int frameDelta);
    HRESULT GetLoopedPlayback ([out] BOOL* loop);
    HRESULT SetLoopedPlayback ([in] BOOL loop);
    HRESULT GetSingleClipPlayback ([out] BOOL* single);
    HRESULT SetSingleClipPlayback ([in] BOOL single);
    HRESULT GetAutoRollOnTake ([out] BOOL* autoRollOnTake);
    HRESULT SetAutoRollOnTake ([in] BOOL autoRollOnTake);
    HRESULT GetAutoRollOnTakeFrameDelay ([out] unsigned short* frameDelay);
    HRESULT SetAutoRollOnTakeFrameDelay ([in] unsigned short frameDelay);
    HRESULT GetNetworkAddress ([out] unsigned int* address);
    HRESULT SetNetworkAddress ([in] unsigned int address);
    HRESULT AddCallback ([in] IBMDSwitcherHyperDeckCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherHyperDeckCallback* callback);
};

/* Interface IBMDSwitcherHyperDeckIterator_v9.0.1 - HyperDeck Iterator */

[
    object,
    uuid(35879F23-168D-4AF2-80B0-6D72838E17F9),
    helpstring("HyperDeck Iterator v9.0.1")
] interface IBMDSwitcherHyperDeckIterator_v9_0_1 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherHyperDeck_v9_0_1** hyperDeck);
    HRESULT GetById ([in] BMDSwitcherHyperDeckId hyperDeckId, [out] IBMDSwitcherHyperDeck_v9_0_1** hyperDeck);
};

/* Interface IBMDSwitcherRecordDiskIterator_v9.0.1 - RecordDisk Iterator */

[
    object,
    uuid(777B5A46-83EF-4615-9722-146C79436927),
    helpstring("RecordDisk Iterator v9.0.1")
] interface IBMDSwitcherRecordDiskIterator_v9_0_1 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherRecordDisk_v9_0_1** recordDisk);
    HRESULT GetById ([in] BMDSwitcherRecordDiskId diskId, [out] IBMDSwitcherRecordDisk_v9_0_1** disk);
};

/* Interface IBMDSwitcherRecordDisk_v.9.0.1 - Switcher RecordDisk Object */

[
    object,
    uuid(2F2046BD-E6FC-4CC0-8689-94454F027997),
    helpstring("Switcher RecordDisk Object v9.0.1")
] interface IBMDSwitcherRecordDisk_v9_0_1 : IUnknown
{
    HRESULT GetId ([out] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetVolumeName ([out] BSTR* volumeName);
    HRESULT GetRecordingTimeAvailable ([out] unsigned int* recordingTimeAvailable);
    HRESULT GetStatus ([out] BMDSwitcherRecordDiskStatus* diskStatus);
    HRESULT AddCallback ([in] IBMDSwitcherRecordDiskCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordDiskCallback* callback);
};

/* Interface IBMDSwitcherRecordAV_v9.0.1 - Switcher RecordAV Object */

[
    object,
    uuid(916580BA-8655-4195-8138-EA038981A1FE),
    helpstring("Switcher RecordAV Object v9.0.1")
] interface IBMDSwitcherRecordAV_v9_0_1 : IUnknown
{
    HRESULT StartRecording (void);
    HRESULT StopRecording (void);
    HRESULT SwitchDisk (void);
    HRESULT IsRecording ([out] BOOL* recording);
    HRESULT GetStatus ([out] BMDSwitcherRecordAVState* state, [out] BMDSwitcherRecordAVError* error);
    HRESULT SetFilename ([in] BSTR filename);
    HRESULT GetFilename ([out] BSTR* filename);
    HRESULT SetRecordInAllCameras ([in] BOOL recordInAllCameras);
    HRESULT GetRecordInAllCameras ([out] BOOL* recordInAllCameras);
    HRESULT DoesSupportISORecording ([out] BOOL* supportsISORecording);
    HRESULT SetRecordAllISOInputs ([in] BOOL recordAllISOInputs);
    HRESULT GetRecordAllISOInputs ([out] BOOL* recordAllISOInputs);
    HRESULT GetWorkingSetLimit ([out] unsigned int* workingSetLimit);
    HRESULT SetWorkingSetDisk ([in] unsigned int workingSetIndex, [in] BMDSwitcherRecordDiskId diskId);
    HRESULT GetWorkingSetDisk ([in] unsigned int workingSetIndex, [out] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetActiveDiskIndex ([out] unsigned int* workingSetIndex);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned long long* duration);
    HRESULT GetTimecode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetTotalRecordingTimeAvailable ([out] unsigned int* totalRecordingTimeAvailable);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherRecordAVCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordAVCallback* callback);
};

/* Interface IBMDSwitcherStreamRTMP_v9.0.1 - Switcher Stream RTMP Object */

[
    object,
    uuid(30CC3D23-DE0A-48CE-B46F-854D0C630549),
    helpstring("Switcher Stream RTMP Object v9.0.1")
] interface IBMDSwitcherStreamRTMP_v9_0_1 : IUnknown
{
    HRESULT StartStreaming (void);
    HRESULT StopStreaming (void);
    HRESULT IsStreaming ([out] BOOL* streaming);
    HRESULT GetStatus ([out] BMDSwitcherStreamRTMPState* state, [out] BMDSwitcherStreamRTMPError* error);
    HRESULT SetServiceName ([in] BSTR serviceName);
    HRESULT GetServiceName ([out] BSTR* serviceName);
    HRESULT SetUrl ([in] BSTR url);
    HRESULT GetUrl ([out] BSTR* url);
    HRESULT SetKey ([in] BSTR url);
    HRESULT GetKey ([out] BSTR* key);
    HRESULT SetVideoBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetVideoBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT SetAudioBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetAudioBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned long long* duration);
    HRESULT GetTimecode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetEncodingBitrate ([out] unsigned int* encodingBitrate);
    HRESULT GetCacheUsed ([out] double* cacheUsed);
    HRESULT SetAuthentication ([in] BSTR username, [in] BSTR password);
    HRESULT GetAuthentication ([out] BSTR* username, [out] BSTR* password);
    HRESULT SetLowLatency ([in] BOOL lowLatency);
    HRESULT GetLowLatency ([out] BOOL* lowLatency);
    HRESULT AddCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
};
